<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Automatic sense prediction for implicit discourse relations in text 阅读笔记]]></title>
    <url>%2F2018%2F11%2F21%2FAutomatic-sense-prediction-for-implicit-discourse-relations-in-text-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[使用PDTB四大关系为了theory-neutral(理论中立) Word pair features in prior work1 Cross product of wordsword pair: 是大多数前人隐式关系分类的基本特征 针对使用word pair，会出现2个问题： 词数太多，导致要特征可选择性太多； 词频不够大，导致数据稀疏问题； 若用word pair有用，先用显式语料找出个关系对应的word pair，再用于隐式关系分类中。 为了解决问题1，前人挑选了一些词（非功能词） 使用所有的词效果好于仅仅使用non-function words（在千万级别训练数据上得到的结果Marcu and Echihabi (2001)）。但是Marcu and Echihabi (2001)发现，去除function词（it,the,…)，学习曲线会变陡。他们猜想在训练数据足够的情况下，只使用non-function词比使用所有词强。 动词对比其他词对（名词对、形容词对等几乎）效果好（Lapata and Lascarides (2004) ） Blair-Goldensohn et al.** (2007)使用（1）取词干；（2）只用频率较高的词干形成固定词典（但是Pitler认为这样会导致词典中都是function词）；（3）a cutoff on the minimum frequency of a feature（置频率小的特征值为0？）。这些全部都能提高性能。删去stop words（it,the,…)，效果反而变差**。 删去词频&lt;5的词后，用MALLET toolkit选取有最大信息量的词对，结果显示，最大信息量词对多为stop words其包含连接词（e.g., it-but)。 作者的自问自答：1 为什么含信息量最大的词对如此异常（对多为stop words或者连接词）原因： 人为删去连接词造隐式语料，遗留的与真正关系无关的连接词会成为真正关系的重要词对。比如，Contrast中的but（conn）全被删除了，反而Contingency里存在的不是连接词的but被作为判别非Contrast关系的主要词对组成元素。 这样的方法虽然对删去连接词的伪隐式语料有效，但是对真正的隐式语料是无效的。 例子2 为什么使用仅仅名词、动词、形容词（几乎等于删去function words外的）效果不如所有词一起训练的好？原因：机器MALLET toolkit选出来的信息量最大的词对多为stop words或者连接词。 篇章关系识别使用的特征1 Polarity Tags: 正反2极的词对，多为Comparison关系。 因为一对相反的词：popular/oblivion可以说语义相反，也可以说popular是积极的，oblivion是消极的 使用不同极性词的个数作为特征。 2 Inquirer Tags: （General Inquirer lexicon (Stone et ak., 1966)) 使用标签而非词对的好处是：可以see more observation for语义类别不是单个词，比如某类-某类词之间是什么关系，而不是某个-某个词之间是什么关系。 3 Money/Percent/Num: 使用2个arg中的num、percnet、money个数作为特征，同时，两个arg中num、percnet、money的组队个数作为特征。（e.g., arg1中2个percent，arg2中一个money，可组成2对数：percent1-money和percent2-money） 多出现于金融类文章中 4 WSJ-LM：表示词的经典程度：哪个词对各关系而言，更典型。 为每个sense在隐式语料上训练一个unigram和bigram语言模型，再用这个模型来决定这个例子最有可能是哪类。（比如，根据unigram模型，这个例子第三有可能由Contingency关系产生，标为ContingencyUnigram3） 5 Expl-LM： 同4，但是使用在显式语料上训练的语言模型。 6 Verbs： 来自Levin verb class中相同class的动词数目： 动词关系越接近，越可能是Expansion 动词短语长短的平均值，两个arg此值的向量积 动词越长：Contingency，因为他经常包含事后的理由（rationales afterwards)。 短：Expansion/Temporal POS TAG (用于观测动词时态) 一致：Expansion 不一致：Contingency/Temporal 7 First-Last, First3: 因为类似连接词的表达方式通常在句首或句尾。 取arg1的首尾词，arg2的首尾词，arg1和arg2的首词，arg1和arg2的尾词，arg1的前3个词，arg2的前3个词。 8 Modality： 有：Contingency 以是否有情态动词、以及两arg的有无情态动词的特征向量积作为特征。 9 Context 作为一个段落的开头和在段落中也有不同分布，将arg1是否是一个段落的开头作为特征。 隐式语料前后的显式语料关系与隐式关系很大可能是相同的，以隐式语料前后的explicit relation作为特征。 实验结果分析 Features Comp. vs. Not Cont. vs. Other Exp. vs. Other Temp. vs. Other Four-way Money/Percent/Num 19.04 (43.60) 18.78 (56.27) 22.01 (41.37) 10.40 (23.05) (63.38) Polarity Tags 16.63 (55.22) 19.82 (76.63) 71.29 (59.23) 11.12 (18.12) (65.19) WSJ-LM 18.04 (9.91) 0.00 (80.89) 0.00 (35.26) 10.22 (5.38) (65.26) Expl-LM 18.04 (9.91) 0.00 (80.89) 0.00 (35.26) 10.22 (5.38) (65.26) Verbs 18.55 (26.19) 36.59 (62.44) 59.36 (52.53) 12.61 (41.63) (65.33) First-Last, First3 21.01 (52.59) 36.75 (59.09) 63.22 (56.99) 15.93 (61.20) (65.40) Inquirer tags 17.37 (43.8) 15.76 (77.54) 70.21 (58.04) 11.56 (37.69) (62.21) Modality 17.70 (17.6) 21.83 (76.95) 15.38 (37.89) 11.17 (27.91) (65.33) Context 19.32 (56.66) 29.55 (67.42) 67.77 (57.85) 12.34 (55.22) (64.01) Random 9.91 19.11 64.74 5.38 Comparision： Polarity Tags特征表现最差，与常识相反。因为30%的Comparison例子中有反极性tag，31%的其他关系中也有反极性tage。（这是第一次有人在篇章关系中检查盛行的极性标签特征） Contingency （隐式）经常紧跟在显式Comparison后； Contingency中包含52%的极性相反词对，non-Contingency中包含41%极性相反词对，所以极性标签能识别出Contingency。 Temporal First-Last, First3对其最有效，因为时序关系经常在句尾有“yesterday”和“Monday”这样的词。 序列模型因为隐式关系与其周围实例关系之间存在联系，所以最好不要独立地为各个句子分类，而是使用CRF模型来为一系列隐式实例分类（Dai et al.， 2018的灵感来源）。 总结最好的应用这些特征的方法是：从大量显式语料中抽取出特征，用隐式语料训练这些特征。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F30%2FHello-World%2F</url>
    <content type="text"><![CDATA[搭建这个博客花了今天大半天的时间，最后还是如愿搭成了！开心~~撒花✿✿ヽ(°▽°)ノ✿✿✿ヽ(°▽°)ノ✿ 搭这个博客的起因是搜一篇论文搜到同学博客上了，然后稍微“从众”了一下，而且最近整理了一点点东西，也想要分享一下。 那么，祝我每天都有所进步，自律并开心，也祝大家每天都有所进步！不要忘了锻炼身体哟~ 以上]]></content>
      <categories>
        <category>Live</category>
      </categories>
      <tags>
        <tag>Live</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Xmanger在linux环境下打开pycharm图形化界面]]></title>
    <url>%2F2018%2F10%2F30%2F%E4%BD%BF%E7%94%A8Xmanger%E5%9C%A8linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%BC%80pycharm%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[在windows下载Xmanger 在Xmanger界面配置Xshell会话： 下载pycharm的linux版：pycharm-community-2018.2.4.tar.gz 在Xshell终端解压： 1tar -xzvf pycharm-community-2018.2.4.tar.gz 运行图形化pycharm： 12cd /pycharm-community-2018.2.4/binbash pycharm.sh]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
</search>
